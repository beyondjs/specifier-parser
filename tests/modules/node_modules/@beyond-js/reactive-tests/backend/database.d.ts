/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'sqlite3';
import * as __beyond_dep_ns_1 from 'sqlite';
// connection.ts
declare namespace ns_0 {
  /// <reference types="./vendor-typings/sqlite3" />
  import sqlite3 = __beyond_dep_ns_0;
  import Database = __beyond_dep_ns_1.Database;
  export class DatabaseConnection {
    private db;
    constructor();
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    get connection(): Database<sqlite3.Database, sqlite3.Statement>;
  }
}


// stores\book.ts
declare namespace ns_1 {
  interface Book {
    id: number;
    title: string;
    author: string;
    year: number;
  }
  interface LoadAllOptions {
    filter?: string;
    limit?: number;
  }
  export class BookStore {
    private conn;
    constructor();
    loadBook(id: number): Promise<Book>;
    storeBook(book: Book): Promise<any>;
    loadAll(options?: LoadAllOptions): Promise<Book[]>;
    bulkSave(books: any): Promise<any[]>;
  }
  export {};
}


// stores\user.ts
declare namespace ns_2 {
  export interface IUser {
    id: number;
    name: string;
    lastnames: string;
  }
  interface LoadAllOptions {
    filter?: string;
    limit?: number;
  }
  export class UserStore {
    private conn;
    constructor();
    loadUser(id: number): Promise<IUser>;
    storeUser(user: IUser): Promise<any>;
    loadAll(options?: LoadAllOptions): Promise<{
      entries: IUser[];
      deletedIds: number[];
    }>;
    bulkSave(users: any): Promise<any[]>;
    clear(): Promise<void>;
    deleteItems(ids: number[]): Promise<void>;
    delete(id: any): Promise<void>;
  }
  export {};
}


export import DatabaseConnection = ns_0.DatabaseConnection;
export import BookStore = ns_1.BookStore;
export import IUser = ns_2.IUser;
export import UserStore = ns_2.UserStore;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };